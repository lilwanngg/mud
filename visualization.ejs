<!DOCTYPE html>
<html>

<head>
  <link href="https://fonts.googleapis.com/css?family=Livvic:100,200,300&display=swap" rel="stylesheet">
  <script src="http://d3js.org/d3.v4.min.js" charset="utf-8"></script>
  <title>
    
  </title>
  <link rel='stylesheet' href='/stylesheets/visualization.css' />
</head>


<body>
    <div class="page-title">welcome to your music <div class="mud"> m√ºd</div></div>
    <div class="content">
      <div class="choice-buttons">
        <script>
            let short = "short", medium = "medium", long = "long"
        </script>
        time-period:
        <button onclick="updateTime(short)">short</button>
        <button onclick="updateTime(medium)">medium</button>
        <button onclick="updateTime(long)">long</button>
        <br/>
        <br/>
        <br/>
        feature:
        <div class="choices">
          <button>energy</button>
          <button>tempo</button>
          <button>loudness</button>
          <button>danceability</button>
        </div>
      </div>
      <div class="canvas">
        <circle></circle>
      </div>
      <ul id="recommendations-area"> recommendations
    
        <% const recs = recommendations.medium %>
        <% recs.forEach( rec => { %>
          <li class="rec">
            <div class="rec-title"><%= rec[1] %></div>
            <div class="rec-artist"><%= rec[0] %></div>
          </li>
        <% }) %>
      </ul>

    </div>


</body>

<script>
  //default to medium time (3 months)
  let time = "medium"
  let dataset

  function updateTime(selection) {
    time = selection
  }
  
  if (time === "short") {
    dataset = <%- JSON.stringify(audio_features.short) %>
  } else if ( time === "medium" ) {
    dataset = <%- JSON.stringify(audio_features.medium) %>
  } else {
    dataset = <%- JSON.stringify(audio_features.long) %>
  }

  const colors = [ "#FFA69E", "#FAF3DD", "#B8F2E6", "#AED9E0", "#7F899F", "#8FBC8F", "#D8BFD8" ]
  const strokes = ["#CD3434", "#E1C829", "#92C0B7", "#729172", "#336891", "#729172", "#9C829C"]

  document.addEventListener("DOMContentLoaded", () => {
    const width = 700
    const height = 600
    const padding = 50

    const canvas = d3.select(".canvas")

    const svg = canvas.append("svg")
      .attr('width', width)
      .attr('height', height)
      .attr('padding', 50)

    const x = d3.scaleLinear().domain([0, 1.0]).range([50, width-50])
    const y = d3.scaleLinear().domain([0, 1]).range([height-50, 50])
    const xAxis = d3.axisBottom(x).ticks(10)
    const yAxis = d3.axisLeft(y).ticks(10)

    var div = d3.select("body").append("div")
      .attr("class", "tooltip")
      .style("opacity", 0);

    svg.append('g')
       .attr("class", "axis axis-x")
       .attr("transform", "translate(10," + (height - 50) + ")")
       .call(xAxis)
       .selectAll("text")
          .style("text-anchor", "end")
          .attr("dx", ".6em")

    svg.append('g')
       .attr("class", "axis axis-y")
       .attr("transform", "translate(60,0)")
       .call(yAxis);

    svg.append("text")
      .attr("transform",
        "translate(" + (width / 2) + " ," +
        (height) + ")")
      .attr("dx", "0.5em")
      .style("text-anchor", "middle")
      .text("valence");

    svg.append("text")
      .attr("transform",
        "translate(" + (width-100) + " ," +
        (height-18) + ")")
      .style("text-anchor", "middle")
      .text("happy, cheerful, euphoric --> ")
      .attr("font-size", "11px")

    svg.append("text")
      .attr("transform",
        "translate(" + (120) + " ," +
        (height-18) + ")")
      .style("text-anchor", "middle")
      .text("<-- sad, depressed, angry")
      .attr("font-size", "11px")

    svg.append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 0)
      .attr("x", 0 - (height / 2))
      .attr("dy", "1em")
      .style("text-anchor", "middle")
      .text("energy");


    svg.selectAll("circle")
       .data(dataset)
       .enter()
       .append("circle")
       .attr('cx', function(d) {
        return (d.valence*(width-70)+60)
       })
       .attr('cy', function(d) {
        return (height-50)-d.energy*(height-100)
       })
       .attr('r', function(d) {
        return Math.sqrt((50-d.idx)*15)
       })
       .style("opacity", 0.6)
       .attr('stroke', function(d) {
         return strokes[d.idx%7]
       })
       .attr('fill', function(d) {
         return colors[d.idx%7]
       })
       .on("mouseover", function (d) {
        d3.select(this)
          .style("opacity", 1)
        div.transition()
          .duration(200)
          .style("opacity", .9);
        div.html("Rank: " + (d.idx+1) + "<br/>" + `"${d.title}"` + "<br/>" + d.artist)
          .style("left", (d3.event.pageX + 20) + "px")
          .style("top", (d3.event.pageY - 28) + "px");
        })
        .on("mouseout", function (d) {
          d3.select(this)
            .style("opacity", .6)
          div.transition()
            .duration(500)
            .style("opacity", 0);
        });
  })



  
</script>


</html>
